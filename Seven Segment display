;---------------------
; Title: Seven Segment
;---------------------
; Program Details:
; The idea of this program is to have a seven segment decrement 
; and increment depending of the push of button A or B. B is to
; decrement and A is to increment. If held at the same time, the 
; the values are reset to 0.    
 
    
; Inputs: RA0, RA1
; Outputs: RD0, RD1, RD2, RD3, RD4, RD5, RD6, RD7 


; Date: Mar 26, 2024
; File Dependencies / Libraries: It is required to include the
;   AssemblyConfig.inc in the Header Folder
; Compiler: xc8, 2.4
; Author: JUAN JIMENEZ
; Versions:
;       V1.0: Original
#include "./AssemblyConfig.inc"
#include <xc.inc>
PSECT absdata,abs,ovrld 
;---------------------
; Program Inputs
;---------------------
Inner_loop EQU 0XFF
Outer_loop EQU 0xFF
;---------------------
; REGISTERS
;---------------------
REG00	EQU	0X00
REG01	EQU	0X01
REG02	EQU	0X02
REG03	EQU	0X03
REG04	EQU	0X04
REG05	EQU	0X05
REG06	EQU	0X06
REG07	EQU	0X07
REG08	EQU	0X08
REG09	EQU	0X09
REGA	EQU	0X0A
REGB	EQU	0X0B
REGC	EQU	0X0C
REGD	EQU	0X0D
REGE	EQU	0X0E
REGF	EQU	0X0F
REG20	EQU	0X20
REG21	EQU	0X21
;---------------------
; MAIN
;---------------------   
ORG 0X20
CALL	_SEG_VALUES
LFSR	0, 0X00
MOVFF	INDF0, PORTD ; zero in 7 seg
MOVFF	PORTD, PORTB ; zero in 7 seg

GOTO	_START
ORG 0x40
_START:
    CALL    _RESET
    BTFSC   PORTA, 1
    CALL    _INCREMENT
    BTFSC   PORTA, 0 
    CALL    _DECREMENT
    GOTO    _START

_RESET:
    BTFSS   PORTA, 1 ; if PortA1 1, skip
    RETURN
    BTFSS   PORTA, 0 ; if PortA2 1, skip
    RETURN
    CALL    _LOOP
    LFSR    0, 0X00
    MOVFF   INDF0, PORTD 
    MOVFF   INDF0, PORTB ; added
    
    GOTO    _RESET
_LOOP:
    MOVLW   Inner_loop
    MOVWF   REG20
    MOVLW   Outer_loop
    MOVWF   REG21
_loop1:
    DECF    REG20, 1
    BNZ	    _loop1
    MOVLW   Inner_loop
    MOVWF   REG20
    DECF    REG21, 1
    BNZ	    _loop1
    RETURN
    
_SEG_VALUES:

    MOVLW   0b00111111
    MOVWF   REG00
    
    MOVLW   0b00000110
    MOVWF   REG01
    
    MOVLW   0b01011011
    MOVWF   REG02
    
    MOVLW   0b01001111
    MOVWF   REG03
    
    MOVLW   0b01100110
    MOVWF   REG04
    
    MOVLW   0b01101101
    MOVWF   REG05
    
    MOVLW   0b01111101
    MOVWF   REG06
    
    MOVLW   0b00000111
    MOVWF   REG07
    
    MOVLW   0b01111111
    MOVWF   REG08
    
    MOVLW   0b01100111
    MOVWF   REG09
    
    MOVLW   0b01110111
    MOVWF   REGA
    
    MOVLW   0b01111111
    MOVWF   REGB
    
    MOVLW   0b00111001
    MOVWF   REGC
    
    MOVLW   0b01011110
    MOVWF   REGD
    
    MOVLW   0b01111001
    MOVWF   REGE
    
    MOVLW   0b01110001
    MOVWF   REGF
    
    CALL    _SET_PORTA
    CALL    _SET_PORTB
    CALL    _SET_PORTD
    
    
    RETURN
    
_SET_PORTA:
    BANKSEL TRISA
    CLRF    TRISA
    BANKSEL LATA
    CLRF    LATA
    BANKSEL ANSELA
    CLRF    ANSELA
    MOVLW   0XFF
    MOVWF   TRISA
    
    RETURN

_SET_PORTB:
    BANKSEL TRISB
    CLRF    TRISB
    BANKSEL LATB
    CLRF    LATB
    BANKSEL ANSELB
    CLRF    ANSELB
    MOVLW   0X00
    MOVWF   TRISB
    
    RETURN
 
_SET_PORTD:
    BANKSEL TRISD
    CLRF    TRISD
    BANKSEL LATD
    CLRF    LATD
    BANKSEL ANSELD
    CLRF    ANSELD
    MOVLW   0X00
    MOVWF   TRISD
    
    RETURN

_INCREMENT:
    CALL   _LOOP
    BTFSC  PORTA, 0 ; if PortA 1, skip
    RETURN
    MOVLW   0X10
    CPFSLT  FSR0 ; if FSR0 < 10 then skip
    LFSR    0, 0X00
    MOVFF   PREINC0, PORTD ; increments FSR0 then reads it
    MOVFF   INDF0, PORTB ; added
    BTFSS   PORTA , 1 ; if PortA1 is still 1 skip
    RETURN
    GOTO    _INCREMENT

_DECREMENT:
    CALL    _LOOP
    BTFSC   PORTA, 1 ; if PortA is 0 then skip
    RETURN 
    MOVFF   INDF0, PORTB ; ADDED
    MOVFF   POSTDEC0, PORTD ; READS FSR0 AND DEC
    MOVLW   0X00 
    CPFSGT  FSR0 ; FSR0 > 0 SKIP
    LFSR    0, 0X10
    
    BTFSS   PORTA, 0 ; IF PORTa0 STILL 1 SKIP
    RETURN
    GOTO    _DECREMENT
   
    
